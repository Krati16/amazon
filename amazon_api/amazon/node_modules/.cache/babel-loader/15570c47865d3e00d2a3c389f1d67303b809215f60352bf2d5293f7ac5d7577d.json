{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.create = void 0;\nvar timeNow = require('time-now');\nfunction create(grid) {\n  var frames = [];\n  var totalTime = 0;\n  var totalFrames = 0;\n  var totalWindowTime = 0;\n  var lastLoopTime;\n  var filteredFrameTime = 0;\n  var filterStrength = 20;\n  var belowThresholdCount = 0;\n  var numCalcs = 0;\n  var filteredAverage;\n  var requestId;\n  function addFrameToWindow(frameLength) {\n    if (typeof frameLength !== 'number' || isNaN(frameLength)) {\n      console.warn('passed non number to fps.addFrame()');\n      return;\n    }\n    if (frames.length > fps.windowSize) {\n      var frame = frames.shift();\n      if (frame !== undefined) {\n        totalWindowTime -= frame;\n      }\n    }\n    totalWindowTime += frameLength;\n    totalTime += frameLength;\n    totalFrames++;\n    frames.push(frameLength);\n  }\n  grid.eventLoop.bind('grid-destroy', function () {\n    if (requestId) {\n      cancelAnimationFrame(requestId);\n      requestId = undefined;\n    }\n  });\n  var fps = {\n    threshold: 20,\n    windowSize: 60,\n    slowCount: 0,\n    logging: false,\n    allAverages: false,\n    markFrameTime: function () {\n      var nowTime = timeNow();\n      if (lastLoopTime) {\n        var frameLength = nowTime - lastLoopTime;\n        filteredFrameTime += (frameLength - filteredFrameTime) / filterStrength;\n        filteredAverage = 1000 / filteredFrameTime;\n        if (filteredAverage < fps.threshold) {\n          belowThresholdCount++;\n        }\n        if (fps.allAverages) {\n          addFrameToWindow(1000 / frameLength);\n        }\n        numCalcs++;\n      }\n      lastLoopTime = nowTime;\n    },\n    getMovingAverage: function () {\n      return totalWindowTime / frames.length;\n    },\n    getAllTimeAverage: function () {\n      return totalTime / totalFrames;\n    },\n    getLast: function () {\n      return frames[frames.length - 1];\n    },\n    getFilteredAverage: function () {\n      return filteredAverage;\n    },\n    intervalId: window.setInterval(function () {\n      fps.percentBelowThreshold = belowThresholdCount / numCalcs * 100;\n      if (fps.percentBelowThreshold > 50) {\n        fps.slowCount++;\n      }\n      if (fps.logging) {\n        console.log('percent below threshold', fps.percentBelowThreshold.toFixed(1), 'filtered average', fps.getFilteredAverage());\n      }\n      belowThresholdCount = 0;\n      numCalcs = 0;\n    }, 1000)\n  };\n  function fpsMeasure() {\n    if (grid.destroyed) {\n      return;\n    }\n    requestId = requestAnimationFrame(fpsMeasure);\n    fps.markFrameTime();\n  }\n  fpsMeasure();\n  return fps;\n}\nexports.create = create;\nexports.default = create;","map":{"version":3,"names":["timeNow","require","create","grid","frames","totalTime","totalFrames","totalWindowTime","lastLoopTime","filteredFrameTime","filterStrength","belowThresholdCount","numCalcs","filteredAverage","requestId","addFrameToWindow","frameLength","isNaN","console","warn","length","fps","windowSize","frame","shift","undefined","push","eventLoop","bind","cancelAnimationFrame","threshold","slowCount","logging","allAverages","markFrameTime","nowTime","getMovingAverage","getAllTimeAverage","getLast","getFilteredAverage","intervalId","window","setInterval","percentBelowThreshold","log","toFixed","fpsMeasure","destroyed","requestAnimationFrame","exports","default"],"sources":["C:\\amazon\\amazon\\node_modules\\grid\\src\\modules\\fps\\index.ts"],"sourcesContent":["import { Grid } from '../core';\n\nconst timeNow = require('time-now');\n\nexport interface IFps {\n    threshold: number;\n    windowSize: number;\n    slowCount: number;\n    intervalId: number;\n    percentBelowThreshold?: number;\n    allAverages: boolean;\n    logging: boolean;\n    markFrameTime(): void;\n    getMovingAverage(): number;\n    getAllTimeAverage(): number;\n    getLast(): number | undefined;\n    getFilteredAverage(): number | undefined;\n}\n\nexport function create(grid: Grid) {\n\n    const frames: number[] = [];\n    let totalTime = 0;\n    let totalFrames = 0;\n    let totalWindowTime = 0;\n    let lastLoopTime: number | undefined;\n    let filteredFrameTime = 0;\n    const filterStrength = 20;\n    let belowThresholdCount = 0;\n    let numCalcs = 0;\n    let filteredAverage: number | undefined;\n    let requestId: number | undefined;\n\n    function addFrameToWindow(frameLength: number) {\n        if (typeof frameLength !== 'number' || isNaN(frameLength)) {\n            console.warn('passed non number to fps.addFrame()');\n            return;\n        }\n        if (frames.length > fps.windowSize) {\n            const frame = frames.shift();\n            if (frame !== undefined) {\n                totalWindowTime -= frame;\n            }\n        }\n        totalWindowTime += frameLength;\n        totalTime += frameLength;\n        totalFrames++;\n        frames.push(frameLength);\n    }\n\n    grid.eventLoop.bind('grid-destroy', () => {\n        if (requestId) {\n            cancelAnimationFrame(requestId);\n            requestId = undefined;\n        }\n    });\n\n    const fps: IFps = {\n        threshold: 20,\n        windowSize: 60,\n        slowCount: 0,\n        logging: false,\n        allAverages: false,\n        markFrameTime() {\n            const nowTime = timeNow();\n            if (lastLoopTime) {\n                const frameLength = nowTime - lastLoopTime;\n                filteredFrameTime += (frameLength - filteredFrameTime) / filterStrength;\n                filteredAverage = 1000 / filteredFrameTime;\n                if (filteredAverage < fps.threshold) {\n                    belowThresholdCount++;\n                }\n                if (fps.allAverages) {\n                    addFrameToWindow(1000 / frameLength);\n                }\n                numCalcs++;\n            }\n            lastLoopTime = nowTime;\n        },\n        getMovingAverage() {\n            return totalWindowTime / frames.length;\n        },\n        getAllTimeAverage() {\n            return totalTime / totalFrames;\n        },\n        getLast() {\n            return frames[frames.length - 1];\n        },\n        getFilteredAverage() {\n            return filteredAverage;\n        },\n        intervalId: window.setInterval(() => {\n            fps.percentBelowThreshold = belowThresholdCount / numCalcs * 100;\n            if (fps.percentBelowThreshold > 50) {\n                fps.slowCount++;\n            }\n            if (fps.logging) {\n                console.log('percent below threshold', fps.percentBelowThreshold.toFixed(1), 'filtered average', fps.getFilteredAverage());\n            }\n            belowThresholdCount = 0;\n            numCalcs = 0;\n        }, 1000)\n    };\n\n    function fpsMeasure() {\n        if (grid.destroyed) {\n            return;\n        }\n        requestId = requestAnimationFrame(fpsMeasure);\n        fps.markFrameTime();\n    }\n    fpsMeasure();\n\n    return fps;\n}\n\nexport default create;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}