{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractSpaceConverter = void 0;\nvar range_util_1 = require(\"../range-util\");\nvar AbstractSpaceConverter = function () {\n  function AbstractSpaceConverter(grid) {\n    var _this = this;\n    this.grid = grid;\n    this.up = function (i) {\n      return _this.row.prev(i);\n    };\n    this.down = function (i) {\n      return _this.row.next(i);\n    };\n    this.left = function (i) {\n      return _this.col.prev(i);\n    };\n    this.right = function (i) {\n      return _this.col.next(i);\n    };\n  }\n  AbstractSpaceConverter.prototype.iterate = function () {\n    var args = range_util_1.getArgs(arguments);\n    var range = args.range;\n    var rowFn = args.rowFn;\n    var cellFn = args.cellFn;\n    rowloop: for (var r = range.top; r !== undefined && r < range.top + range.height; r = this.row.next(r)) {\n      var rowResult = void 0;\n      if (rowFn) {\n        rowResult = rowFn(r);\n      }\n      colloop: for (var c = range.left; c !== undefined && c < range.left + range.width; c = this.col.next(c)) {\n        if (cellFn) {\n          var result = cellFn(r, c, rowResult);\n          if (result === false) {\n            break rowloop;\n          } else if (result === true) {\n            break colloop;\n          }\n        }\n      }\n    }\n  };\n  return AbstractSpaceConverter;\n}();\nexports.AbstractSpaceConverter = AbstractSpaceConverter;","map":{"version":3,"names":["range_util_1","require","AbstractSpaceConverter","grid","_this","up","i","row","prev","down","next","left","col","right","prototype","iterate","args","getArgs","arguments","range","rowFn","cellFn","rowloop","r","top","undefined","height","rowResult","colloop","c","width","result","exports"],"sources":["C:\\amazon\\amazon\\node_modules\\grid\\src\\modules\\space\\converter.ts"],"sourcesContent":["import { IColDescriptor, IRowDescriptor } from '../abstract-row-col-model';\nimport { Grid } from '../core';\nimport { RawPositionRange } from '../position-range';\nimport { CellFn, getArgs, RowFn } from '../range-util';\n\nimport { AbstractDimensionalSpaceConverter } from './dimensional-converter';\n\nexport abstract class AbstractSpaceConverter {\n  abstract row: AbstractDimensionalSpaceConverter<IRowDescriptor>;\n  abstract col: AbstractDimensionalSpaceConverter<IColDescriptor>;\n  up: (coord: number) => number | undefined;\n  down: (coord: number) => number | undefined;\n  left: (coord: number) => number | undefined;\n  right: (coord: number) => number | undefined;\n  grid: Grid;\n  constructor(grid: Grid) {\n    this.grid = grid;\n    this.up = (i) => this.row.prev(i);\n    this.down = (i) => this.row.next(i);\n    this.left = (i) => this.col.prev(i);\n    this.right = (i) => this.col.next(i);\n  }\n\n  iterate(range: RawPositionRange, cellFn: CellFn<undefined>): void;\n  iterate<T>(range: RawPositionRange, rowFn: RowFn<T>, cellFn: CellFn<T>): void;\n  iterate<T>() {\n    // expects to be called with the space as its this\n    const args = getArgs<T>(arguments);\n    const range = args.range;\n    const rowFn = args.rowFn;\n    const cellFn = args.cellFn;\n\n    rowloop: for (let r: number | undefined = range.top; r !== undefined && r < range.top + range.height; r = this.row.next(r)) {\n      let rowResult;\n      if (rowFn) {\n        rowResult = rowFn(r);\n      }\n      colloop: for (let c: number | undefined = range.left; c !== undefined && c < range.left + range.width; c = this.col.next(c)) {\n        if (cellFn) {\n          const result = cellFn(r, c, rowResult);\n          if (result === false) {\n            break rowloop;\n          } else if (result === true) {\n            break colloop;\n          }\n        }\n      }\n    }\n  }\n}"],"mappings":";;;;;;AAGA,IAAAA,YAAA,GAAAC,OAAA;AAIA,IAAAC,sBAAA;EAQE,SAAAA,uBAAYC,IAAU;IAAtB,IAAAC,KAAA;IACE,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACE,EAAE,GAAG,UAACC,CAAC;MAAK,OAAAF,KAAI,CAACG,GAAG,CAACC,IAAI,CAACF,CAAC,CAAC;IAAhB,CAAgB;IACjC,IAAI,CAACG,IAAI,GAAG,UAACH,CAAC;MAAK,OAAAF,KAAI,CAACG,GAAG,CAACG,IAAI,CAACJ,CAAC,CAAC;IAAhB,CAAgB;IACnC,IAAI,CAACK,IAAI,GAAG,UAACL,CAAC;MAAK,OAAAF,KAAI,CAACQ,GAAG,CAACJ,IAAI,CAACF,CAAC,CAAC;IAAhB,CAAgB;IACnC,IAAI,CAACO,KAAK,GAAG,UAACP,CAAC;MAAK,OAAAF,KAAI,CAACQ,GAAG,CAACF,IAAI,CAACJ,CAAC,CAAC;IAAhB,CAAgB;EACtC;EAIAJ,sBAAA,CAAAY,SAAA,CAAAC,OAAO,GAAP;IAEE,IAAMC,IAAI,GAAGhB,YAAA,CAAAiB,OAAO,CAAIC,SAAS,CAAC;IAClC,IAAMC,KAAK,GAAGH,IAAI,CAACG,KAAK;IACxB,IAAMC,KAAK,GAAGJ,IAAI,CAACI,KAAK;IACxB,IAAMC,MAAM,GAAGL,IAAI,CAACK,MAAM;IAE1BC,OAAO,EAAE,KAAK,IAAIC,CAAC,GAAuBJ,KAAK,CAACK,GAAG,EAAED,CAAC,KAAKE,SAAS,IAAIF,CAAC,GAAGJ,KAAK,CAACK,GAAG,GAAGL,KAAK,CAACO,MAAM,EAAEH,CAAC,GAAG,IAAI,CAAChB,GAAG,CAACG,IAAI,CAACa,CAAC,CAAC,EAAE;MAC1H,IAAII,SAAS;MACb,IAAIP,KAAK,EAAE;QACTO,SAAS,GAAGP,KAAK,CAACG,CAAC,CAAC;;MAEtBK,OAAO,EAAE,KAAK,IAAIC,CAAC,GAAuBV,KAAK,CAACR,IAAI,EAAEkB,CAAC,KAAKJ,SAAS,IAAII,CAAC,GAAGV,KAAK,CAACR,IAAI,GAAGQ,KAAK,CAACW,KAAK,EAAED,CAAC,GAAG,IAAI,CAACjB,GAAG,CAACF,IAAI,CAACmB,CAAC,CAAC,EAAE;QAC3H,IAAIR,MAAM,EAAE;UACV,IAAMU,MAAM,GAAGV,MAAM,CAACE,CAAC,EAAEM,CAAC,EAAEF,SAAS,CAAC;UACtC,IAAII,MAAM,KAAK,KAAK,EAAE;YACpB,MAAMT,OAAO;WACd,MAAM,IAAIS,MAAM,KAAK,IAAI,EAAE;YAC1B,MAAMH,OAAO;;;;;EAKvB,CAAC;EACH,OAAA1B,sBAAC;AAAD,CAAC,CA1CD;AAAsB8B,OAAA,CAAA9B,sBAAA,GAAAA,sBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}