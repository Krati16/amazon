{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.create = void 0;\nvar debounce_1 = require(\"../debounce\");\nvar tsv = require(\"../tsv\");\nvar innerText = require('inner-text-shim');\nfunction create(grid) {\n  function getCopyPasteRange() {\n    var selectionRange = grid.navigationModel.selection;\n    if (selectionRange.top === -1) {\n      selectionRange = {\n        top: grid.navigationModel.focus.row,\n        left: grid.navigationModel.focus.col,\n        width: 1,\n        height: 1\n      };\n    }\n    return selectionRange;\n  }\n  grid.eventLoop.bind('copy', function (e) {\n    var _a, _b;\n    if (!grid.focused) {\n      if (e.target === grid.textarea) {\n        e.preventDefault();\n      }\n      return;\n    }\n    var copyTable = document.createElement('table');\n    var tableBody = document.createElement('tbody');\n    copyTable.appendChild(tableBody);\n    var tsvData = [];\n    var selectionRange = getCopyPasteRange();\n    var gotNull = false;\n    grid.data.iterate(selectionRange, function () {\n      var row = document.createElement('tr');\n      tableBody.appendChild(row);\n      var array = [];\n      tsvData.push(array);\n      return {\n        row: row,\n        array: array\n      };\n    }, function (r, c, rowResult) {\n      var data = grid.dataModel.get(r, c, true);\n      if (data == null) {\n        return gotNull = true;\n      }\n      var td = document.createElement('td');\n      if (data.value) {\n        td.setAttribute('grid-data', JSON.stringify(data.value));\n      }\n      td.textContent = data.formatted || ' ';\n      td.innerHTML = td.innerHTML.replace(/\\n/g, '<br>') || ' ';\n      rowResult.row.appendChild(td);\n      rowResult.array.push(data.formatted);\n      return undefined;\n    });\n    if (!gotNull) {\n      (_a = e.clipboardData) === null || _a === void 0 ? void 0 : _a.setData('text/plain', tsv.stringify(tsvData));\n      (_b = e.clipboardData) === null || _b === void 0 ? void 0 : _b.setData('text/html', copyTable.outerHTML);\n      e.preventDefault();\n      setTimeout(function () {\n        grid.eventLoop.fire('grid-copy');\n      }, 1);\n    }\n  });\n  function makePasteDataChange(r, c, data) {\n    var value;\n    var formatted;\n    if (typeof data === 'string') {\n      formatted = data;\n    } else {\n      value = data.value;\n      formatted = data.formatted;\n    }\n    return {\n      row: r,\n      col: c,\n      value: value,\n      formatted: formatted,\n      paste: true\n    };\n  }\n  grid.eventLoop.bind('paste', function (e) {\n    if (!grid.focused) {\n      return;\n    }\n    var selectionRange = getCopyPasteRange();\n    if (!e.clipboardData || !e.clipboardData.getData) {\n      console.warn('no clipboard data on paste event');\n      return;\n    }\n    var tsvPasteData = tsv.parse(e.clipboardData.getData('text/plain'));\n    var pasteHtml = e.clipboardData.getData('text/html');\n    e.preventDefault();\n    setTimeout(function () {\n      var tempDiv = document.createElement('div');\n      tempDiv.style.opacity = '0';\n      tempDiv.style.pointerEvents = 'none';\n      tempDiv.style.position = 'absolute';\n      document.body.appendChild(tempDiv);\n      tempDiv.innerHTML = pasteHtml;\n      var table = tempDiv.querySelector('table');\n      var pasteData = tsvPasteData;\n      if (table) {\n        var tablePasteData_1;\n        table.style.whiteSpace = 'pre';\n        tablePasteData_1 = [];\n        var trs_1 = tempDiv.querySelectorAll('tr');\n        [].forEach.call(trs_1, function (tr) {\n          var row = [];\n          tablePasteData_1.push(row);\n          var tds = tr.querySelectorAll('td');\n          [].forEach.call(tds, function (td) {\n            var text = innerText(td);\n            var dataResult = {\n              formatted: text && text.trim(),\n              value: undefined\n            };\n            var gridData = td.getAttribute('grid-data');\n            if (gridData) {\n              try {\n                dataResult.value = JSON.parse(gridData);\n              } catch (error) {\n                console.warn(\"somehow couldn't parse grid data\");\n              }\n            }\n            row.push(dataResult);\n          });\n        });\n        pasteData = tablePasteData_1;\n      }\n      document.body.removeChild(tempDiv);\n      var dataChanges = [];\n      var singlePasteValue;\n      if (pasteData.length === 1 && pasteData[0].length === 1) {\n        singlePasteValue = pasteData[0][0];\n      }\n      if (singlePasteValue) {\n        var singlePasteString_1 = singlePasteValue;\n        var ranges = [selectionRange];\n        ranges = ranges.concat(grid.navigationModel.otherSelections);\n        ranges.forEach(function (range) {\n          grid.data.iterate(range, function (r, c) {\n            dataChanges.push(makePasteDataChange(r, c, singlePasteString_1));\n          });\n        });\n      } else {\n        var top_1 = selectionRange.top;\n        var left_1 = selectionRange.left;\n        pasteData.forEach(function (row, r) {\n          var dataRow = r + top_1;\n          if (dataRow > grid.data.row.count() - 1) {\n            return;\n          }\n          row.forEach(function (pasteValue, c) {\n            var dataCol = c + left_1;\n            if (pasteValue == undefined || dataCol > grid.data.col.count() - 1) {\n              return;\n            }\n            dataChanges.push(makePasteDataChange(dataRow, dataCol, pasteValue));\n          });\n        });\n        var newSelection = {\n          top: top_1,\n          left: left_1,\n          height: pasteData.length,\n          width: pasteData[0].length\n        };\n        grid.navigationModel.clearSelection();\n        grid.navigationModel.setSelection(newSelection);\n      }\n      grid.dataModel.set(dataChanges);\n    }, 1);\n  });\n  var maybeSelectText = debounce_1.default(function maybeSelectTextInner() {\n    if (!(grid.editModel && grid.editModel.editing) && grid.focused) {\n      grid.textarea.value = grid.dataModel.get(grid.navigationModel.focus.row, grid.navigationModel.focus.col).formatted || '.';\n      grid.textarea.select();\n    }\n  }, 1);\n  grid.eventLoop.bind('keyup', function (_e) {\n    maybeSelectText();\n  });\n  grid.eventLoop.bind('grid-focus', function (_e) {\n    maybeSelectText();\n  });\n  grid.eventLoop.bind('mousedown', function (e) {\n    if (e.target !== grid.textarea) {\n      return;\n    }\n    maybeSelectText();\n  });\n  return {\n    _maybeSelectText: maybeSelectText\n  };\n}\nexports.create = create;\nexports.default = create;","map":{"version":3,"names":["debounce_1","require","tsv","innerText","create","grid","getCopyPasteRange","selectionRange","navigationModel","selection","top","focus","row","left","col","width","height","eventLoop","bind","e","focused","target","textarea","preventDefault","copyTable","document","createElement","tableBody","appendChild","tsvData","gotNull","data","iterate","array","push","r","c","rowResult","dataModel","get","td","value","setAttribute","JSON","stringify","textContent","formatted","innerHTML","replace","undefined","_a","clipboardData","setData","_b","outerHTML","setTimeout","fire","makePasteDataChange","paste","getData","console","warn","tsvPasteData","parse","pasteHtml","tempDiv","style","opacity","pointerEvents","position","body","table","querySelector","pasteData","tablePasteData_1","whiteSpace","trs_1","querySelectorAll","forEach","call","tr","tds","text","dataResult","trim","gridData","getAttribute","error","removeChild","dataChanges","singlePasteValue","length","singlePasteString_1","ranges","concat","otherSelections","range","top_1","left_1","dataRow","count","pasteValue","dataCol","newSelection","clearSelection","setSelection","set","maybeSelectText","default","maybeSelectTextInner","editModel","editing","select","_e","_maybeSelectText","exports"],"sources":["C:\\amazon\\amazon\\node_modules\\grid\\src\\modules\\copy-paste\\index.ts"],"sourcesContent":["import { Grid } from '../core';\nimport { IGridDataChange, IGridDataResult } from '../data-model';\nimport debounce from '../debounce';\nimport { RawPositionRange } from '../position-range';\nimport * as tsv from '../tsv';\n\nconst innerText = require('inner-text-shim');\n\nexport interface ICopyPaste {\n  _maybeSelectText(): void;\n}\n\nexport function create(grid: Grid): ICopyPaste {\n  function getCopyPasteRange(): RawPositionRange {\n    let selectionRange = grid.navigationModel.selection;\n    // valid selection range cannot go to -1\n    if (selectionRange.top === -1) {\n      selectionRange = {\n        top: grid.navigationModel.focus.row,\n        left: grid.navigationModel.focus.col,\n        width: 1,\n        height: 1,\n      };\n    }\n    return selectionRange;\n  }\n\n  grid.eventLoop.bind('copy', (e) => {\n    if (!grid.focused) {\n      if (e.target === grid.textarea) {\n        e.preventDefault();\n      }\n      return;\n    }\n    // prepare for copy\n    const copyTable = document.createElement('table');\n    const tableBody = document.createElement('tbody');\n    copyTable.appendChild(tableBody);\n    const tsvData: string[][] = [];\n    const selectionRange = getCopyPasteRange();\n    let gotNull = false;\n    grid.data.iterate(\n      selectionRange,\n      () => {\n        const row = document.createElement('tr');\n        tableBody.appendChild(row);\n        const array: string[] = [];\n        tsvData.push(array);\n        return {\n          row,\n          array,\n        };\n      },\n      (r: number, c: number, rowResult: { row: HTMLTableRowElement; array: string[] }) => {\n        const data = grid.dataModel.get(r, c, true);\n\n        // intentional == checks null or undefined\n        if (data == null) {\n          return (gotNull = true); // this breaks the col loop\n        }\n        const td = document.createElement('td');\n        if (data.value) {\n          td.setAttribute('grid-data', JSON.stringify(data.value));\n        }\n        td.textContent = data.formatted || ' ';\n        td.innerHTML = td.innerHTML.replace(/\\n/g, '<br>') || ' ';\n        rowResult.row.appendChild(td);\n        rowResult.array.push(data.formatted);\n        return undefined;\n      },\n    );\n    if (!gotNull) {\n      e.clipboardData?.setData('text/plain', tsv.stringify(tsvData));\n      e.clipboardData?.setData('text/html', copyTable.outerHTML);\n      e.preventDefault();\n      setTimeout(() => {\n        grid.eventLoop.fire('grid-copy');\n      }, 1);\n    }\n  });\n\n  function makePasteDataChange(r: number, c: number, data: IGridDataResult<any> | string): IGridDataChange<any> {\n    let value;\n    let formatted;\n    if (typeof data === 'string') {\n      formatted = data;\n    } else {\n      value = data.value;\n      formatted = data.formatted;\n    }\n    return {\n      row: r,\n      col: c,\n      value,\n      formatted,\n      paste: true,\n    };\n  }\n\n  grid.eventLoop.bind('paste', (e) => {\n    if (!grid.focused) {\n      return;\n    }\n    const selectionRange = getCopyPasteRange();\n    if (!e.clipboardData || !e.clipboardData.getData) {\n      console.warn('no clipboard data on paste event');\n      return;\n    }\n    const tsvPasteData = tsv.parse(e.clipboardData.getData('text/plain'));\n    let pasteHtml = e.clipboardData.getData('text/html');\n    e.preventDefault();\n\n    setTimeout(() => {\n      const tempDiv = document.createElement('div');\n\n      // this nonsense is required so .innerText converts <br> to \\n\n      tempDiv.style.opacity = '0';\n      tempDiv.style.pointerEvents = 'none';\n      tempDiv.style.position = 'absolute';\n      document.body.appendChild(tempDiv);\n      //////\n\n      tempDiv.innerHTML = pasteHtml;\n      const table = tempDiv.querySelector('table');\n      let pasteData: Array<Array<string | IGridDataResult<any>>> = tsvPasteData;\n      if (table) {\n        let tablePasteData: Array<Array<IGridDataResult<any>>>;\n        table.style.whiteSpace = 'pre';\n        tablePasteData = [];\n        const trs = tempDiv.querySelectorAll('tr');\n        [].forEach.call(trs, (tr: typeof trs[0]) => {\n          const row: Array<IGridDataResult<any>> = [];\n          tablePasteData.push(row);\n          const tds = tr.querySelectorAll('td');\n          [].forEach.call(tds, (td: typeof tds[0]) => {\n            const text = innerText(td);\n            const dataResult: IGridDataResult<any> = {\n              formatted: text && text.trim(),\n              value: undefined,\n            };\n            const gridData = td.getAttribute('grid-data');\n            if (gridData) {\n              try {\n                dataResult.value = JSON.parse(gridData);\n              } catch (error) {\n                console.warn(\"somehow couldn't parse grid data\");\n              }\n            }\n            row.push(dataResult);\n          });\n        });\n        pasteData = tablePasteData;\n      }\n\n      document.body.removeChild(tempDiv);\n      const dataChanges: Array<IGridDataChange<any>> = [];\n      let singlePasteValue: string | IGridDataResult<any> | undefined;\n      if (pasteData.length === 1 && pasteData[0].length === 1) {\n        singlePasteValue = pasteData[0][0];\n      }\n\n      if (singlePasteValue) {\n        const singlePasteString = singlePasteValue;\n        // this will do nothing if no other selections as it will be an empty array\n        let ranges = [selectionRange];\n        ranges = ranges.concat(grid.navigationModel.otherSelections);\n        ranges.forEach((range) => {\n          grid.data.iterate(range, (r, c) => {\n            dataChanges.push(makePasteDataChange(r, c, singlePasteString));\n          });\n        });\n      } else {\n        const top = selectionRange.top;\n        const left = selectionRange.left;\n\n        pasteData.forEach((row, r) => {\n          const dataRow = r + top;\n          if (dataRow > grid.data.row.count() - 1) {\n            return;\n          }\n          row.forEach((pasteValue, c) => {\n            const dataCol = c + left;\n            // intention == to match null and undefined\n            if (pasteValue == undefined || dataCol > grid.data.col.count() - 1) {\n              return;\n            }\n            dataChanges.push(makePasteDataChange(dataRow, dataCol, pasteValue));\n          });\n        });\n        const newSelection = {\n          top,\n          left,\n          height: pasteData.length,\n          width: pasteData[0].length,\n        };\n\n        grid.navigationModel.clearSelection();\n        grid.navigationModel.setSelection(newSelection);\n      }\n\n      grid.dataModel.set(dataChanges);\n    }, 1);\n  });\n\n  const maybeSelectText = debounce(function maybeSelectTextInner() {\n    if (!(grid.editModel && grid.editModel.editing) && grid.focused) {\n      grid.textarea.value =\n        grid.dataModel.get(grid.navigationModel.focus.row, grid.navigationModel.focus.col).formatted || '.';\n      grid.textarea.select();\n    }\n  }, 1);\n\n  grid.eventLoop.bind('keyup', (_e) => {\n    maybeSelectText();\n  });\n  grid.eventLoop.bind('grid-focus', (_e) => {\n    maybeSelectText();\n  });\n  grid.eventLoop.bind('mousedown', (e) => {\n    if (e.target !== grid.textarea) {\n      return;\n    }\n    maybeSelectText();\n  });\n  return {\n    _maybeSelectText: maybeSelectText,\n  };\n}\n\nexport default create;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}