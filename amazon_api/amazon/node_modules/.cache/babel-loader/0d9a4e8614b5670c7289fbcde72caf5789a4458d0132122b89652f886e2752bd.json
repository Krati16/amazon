{"ast":null,"code":"\"use strict\";\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n  return to;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.create = exports.AbstractRowColModel = void 0;\nvar debounce_1 = require(\"../debounce\");\nvar dirty_clean_1 = require(\"../dirty-clean\");\nvar dirty_props_1 = require(\"../dirty-props\");\nvar pass_through_1 = require(\"../pass-through\");\nvar util = require(\"../util\");\nvar AbstractRowColModel = function () {\n  function AbstractRowColModel(grid, name, lengthName, defaultSize) {\n    this.descriptors = [];\n    this._numFixed = 0;\n    this._numHeaders = 0;\n    this._selected = [];\n    this.grid = grid;\n    this.name = name;\n    this.dirtyClean = dirty_clean_1.default(grid);\n    this.builderDirtyClean = dirty_clean_1.default(grid);\n    this.areBuildersDirty = this.builderDirtyClean.isDirty;\n    this.isDirty = this.dirtyClean.isDirty;\n    this.ROW_COL_EVENT_TYPE = 'grid-' + name + '-change';\n    this.defaultSize = defaultSize;\n    this.lengthName = lengthName;\n    this.fireSelectionChange = debounce_1.default(function () {\n      grid.eventLoop.fire('grid-' + name + '-selection-change');\n    }, 1);\n  }\n  AbstractRowColModel.prototype.add = function (_toAdd) {\n    var _this = this;\n    if (!_toAdd) {\n      return;\n    }\n    var toAdd = util.toArray(_toAdd);\n    toAdd.forEach(function (descriptor) {\n      if (descriptor.header) {\n        _this.descriptors.splice(_this._numHeaders, 0, descriptor);\n        _this._numFixed++;\n        _this._numHeaders++;\n      } else {\n        if (descriptor.fixed) {\n          if (!_this.descriptors.length || _this.descriptors[_this.descriptors.length - 1].fixed) {\n            _this._numFixed++;\n          } else {\n            throw new Error('Cannot add a fixed column after an unfixed one');\n          }\n        }\n        _this.descriptors.push(descriptor);\n      }\n    });\n    this.updateDescriptorIndices();\n    this.setDescriptorsDirty({\n      action: 'add',\n      descriptors: toAdd\n    });\n  };\n  AbstractRowColModel.prototype.addHeaders = function (_toAdd) {\n    if (!_toAdd) {\n      return;\n    }\n    var toAdd = util.toArray(_toAdd);\n    toAdd.forEach(function (headerDescriptor) {\n      headerDescriptor.header = true;\n    });\n    this.add(toAdd);\n  };\n  AbstractRowColModel.prototype.header = function (index) {\n    return this.descriptors[index];\n  };\n  AbstractRowColModel.prototype.get = function (index, dataSpace) {\n    if (dataSpace) {\n      index += this._numHeaders;\n    }\n    return this.descriptors[index];\n  };\n  AbstractRowColModel.prototype.length = function (includeHeaders) {\n    var subtract = includeHeaders ? 0 : this._numHeaders;\n    return this.descriptors.length - subtract;\n  };\n  AbstractRowColModel.prototype.remove = function (descriptor, dontUpdateIndex) {\n    var index = this.descriptors.indexOf(descriptor);\n    if (index !== -1) {\n      this.descriptors.splice(index, 1);\n      if (descriptor.header) {\n        this._numFixed--;\n        this._numHeaders--;\n      } else if (descriptor.fixed) {\n        this._numFixed--;\n      }\n    }\n    if (!dontUpdateIndex) {\n      this.updateDescriptorIndices();\n      this.setDescriptorsDirty({\n        action: 'remove',\n        descriptors: [descriptor]\n      });\n    }\n  };\n  AbstractRowColModel.prototype.clear = function (includeHeaders) {\n    var removed;\n    if (includeHeaders) {\n      removed = this.descriptors;\n      this.descriptors = [];\n      this._numFixed = 0;\n      this._numHeaders = 0;\n    } else {\n      removed = this.descriptors.slice(this._numHeaders);\n      this.descriptors = this.descriptors.slice(0, this._numHeaders);\n      this._numFixed = this._numHeaders;\n    }\n    this.updateDescriptorIndices();\n    if (removed && removed.length) {\n      this.setDescriptorsDirty({\n        action: 'remove',\n        descriptors: removed\n      });\n    }\n  };\n  AbstractRowColModel.prototype.move = function (_fromIndexes, target, after) {\n    var _a;\n    var _this = this;\n    var fromIndexes = util.toArray(_fromIndexes);\n    if (fromIndexes.length === 1) {\n      var from = fromIndexes[0];\n      this.descriptors.splice(target, 0, this.descriptors.splice(from, 1)[0]);\n      this.setDescriptorsDirty({\n        action: 'move',\n        descriptors: [this.get(from), this.get(target)]\n      });\n    } else {\n      while (fromIndexes.indexOf(target) !== -1 && target !== -1) {\n        target--;\n        after = true;\n      }\n      var toValue = this.descriptors[target];\n      var removed = fromIndexes.sort(function (a, b) {\n        return b - a;\n      }).map(function (fromIndex) {\n        var removedDescriptors = _this.descriptors.splice(fromIndex, 1);\n        return removedDescriptors[0];\n      });\n      removed.reverse();\n      (_a = this.descriptors).splice.apply(_a, __spreadArray([this.descriptors.indexOf(toValue) + (after ? 1 : 0), 0], removed));\n      this.updateDescriptorIndices();\n      this.setDescriptorsDirty({\n        action: 'move',\n        descriptors: removed.concat(toValue)\n      });\n    }\n  };\n  AbstractRowColModel.prototype.numHeaders = function () {\n    return this._numHeaders;\n  };\n  AbstractRowColModel.prototype.numFixed = function (excludeHeaders) {\n    return this._numFixed - (excludeHeaders ? this._numHeaders : 0);\n  };\n  AbstractRowColModel.prototype.toVirtual = function (dataIndex) {\n    return dataIndex + this.numHeaders();\n  };\n  AbstractRowColModel.prototype.toData = function (virtualIndex) {\n    return virtualIndex - this.numHeaders();\n  };\n  AbstractRowColModel.prototype.select = function (_indexes, dontFire) {\n    var _this = this;\n    var indexes = util.toArray(_indexes);\n    var changes = indexes.filter(function (idx) {\n      var hasDescriptor = !!_this.get(idx, true);\n      if (!hasDescriptor) {\n        console.warn('Tried to select index that had no descriptor', idx);\n      }\n      return hasDescriptor;\n    }).map(function (idx) {\n      var descriptor = _this.get(idx, true);\n      if (!descriptor.selected && descriptor.selectable !== false) {\n        _this.addDragReadyClass(descriptor, idx);\n        descriptor.selected = true;\n        _this._selected.push(idx);\n        return idx;\n      }\n      return undefined;\n    }).filter(function (c) {\n      return c != undefined;\n    });\n    if (changes.length && !dontFire) {\n      this.fireSelectionChange();\n    }\n  };\n  AbstractRowColModel.prototype.deselect = function (_indexes, dontFire) {\n    var _this = this;\n    var indexes = util.toArray(_indexes);\n    var selectedMap = this._selected.reduce(function (map, selectedIndex) {\n      map[selectedIndex] = selectedIndex;\n      return map;\n    }, {});\n    var changes = indexes.filter(function (idx) {\n      var hasDescriptor = !!_this.get(idx, true);\n      if (!hasDescriptor) {\n        console.warn('Tried to deselect index that had no descriptor', idx);\n      }\n      return hasDescriptor;\n    }).map(function (idx) {\n      var descriptor = _this.get(idx, true);\n      _this.removeDragReadyClass(descriptor);\n      if (descriptor.selected) {\n        descriptor.selected = false;\n        selectedMap[idx] = false;\n        return idx;\n      }\n      return undefined;\n    }).filter(function (c) {\n      return c != undefined;\n    });\n    this._selected = Object.keys(selectedMap).reduce(function (array, selectedKey) {\n      var idx = selectedMap[selectedKey];\n      if (idx !== false) {\n        array.push(idx);\n      }\n      return array;\n    }, []);\n    if (changes.length && !dontFire) {\n      this.fireSelectionChange();\n    }\n  };\n  AbstractRowColModel.prototype.toggleSelect = function (index) {\n    var descriptor = this.get(index, true);\n    if (descriptor.selected) {\n      this.deselect(index);\n    } else {\n      this.select(index);\n    }\n  };\n  AbstractRowColModel.prototype.clearSelected = function () {\n    return this.deselect(this.getSelected().slice(0));\n  };\n  AbstractRowColModel.prototype.getSelected = function () {\n    return this._selected;\n  };\n  AbstractRowColModel.prototype.allSelected = function () {\n    return this.getSelected().length === this.length();\n  };\n  AbstractRowColModel.prototype.create = function (builder) {\n    var _this = this;\n    var fixed = false;\n    var expanded = false;\n    var expandedClass;\n    var setExpanded = function (exp) {\n      var _a;\n      if (!descriptor.children || descriptor.index == undefined) {\n        return;\n      }\n      expanded = exp;\n      if (expanded) {\n        (_a = _this.descriptors).splice.apply(_a, __spreadArray([descriptor.index + 1, 0], descriptor.children));\n        _this.updateDescriptorIndices();\n        _this.setDescriptorsDirty({\n          action: 'add',\n          descriptors: descriptor.children\n        });\n        var top_1 = _this.name === 'row' ? descriptor.index : 0;\n        var left = _this.name === 'col' ? descriptor.index : 0;\n        var height = _this.name === 'row' ? 1 : Infinity;\n        var width = _this.name === 'col' ? 1 : Infinity;\n        expandedClass = _this.grid.cellClasses.create(top_1, left, 'grid-expanded', height, width, 'virtual');\n        _this.grid.cellClasses.add(expandedClass);\n      } else {\n        _this.descriptors.splice(descriptor.index + 1, descriptor.children.length);\n        _this.updateDescriptorIndices();\n        _this.setDescriptorsDirty({\n          action: 'remove',\n          descriptors: __spreadArray([], descriptor.children)\n        });\n        if (expandedClass) {\n          _this.grid.cellClasses.remove(expandedClass);\n        }\n      }\n    };\n    var descriptor = {\n      isBuiltActionable: true,\n      get fixed() {\n        return descriptor.header || !!fixed;\n      },\n      set fixed(_fixed) {\n        fixed = _fixed;\n      },\n      get expanded() {\n        return expanded;\n      },\n      set expanded(exp) {\n        setExpanded(exp);\n      }\n    };\n    dirty_props_1.default(descriptor, ['builder'], [this.builderDirtyClean]);\n    dirty_props_1.default(descriptor, [{\n      name: 'data',\n      onDirty: function () {\n        _this.grid.dataModel.setDirty();\n      }\n    }], []);\n    descriptor.builder = builder;\n    return dirty_props_1.default(descriptor, [{\n      name: this.lengthName,\n      onDirty: function () {\n        _this.setDescriptorsDirty({\n          action: 'size',\n          descriptors: [descriptor]\n        });\n      }\n    }, {\n      name: 'hidden',\n      onDirty: function () {\n        _this.setDescriptorsDirty({\n          action: 'hide',\n          descriptors: [descriptor]\n        });\n      }\n    }], [this.dirtyClean]);\n  };\n  AbstractRowColModel.prototype.createBuilder = function (render, update, includeHeaders) {\n    if (update === void 0) {\n      update = pass_through_1.default;\n    }\n    if (includeHeaders === void 0) {\n      includeHeaders = false;\n    }\n    return {\n      render: render,\n      update: update,\n      includeHeaders: includeHeaders\n    };\n  };\n  AbstractRowColModel.prototype.sizeOf = function (index) {\n    var descriptor = this.get(index);\n    if (!descriptor) {\n      return NaN;\n    }\n    if (descriptor.hidden) {\n      return 0;\n    }\n    var size = descriptor[this.lengthName];\n    return size || this.defaultSize;\n  };\n  AbstractRowColModel.prototype.setDescriptorsDirty = function (eventBody) {\n    var event = Object.assign(eventBody, {\n      type: this.ROW_COL_EVENT_TYPE\n    });\n    this.grid.eventLoop.fire(event);\n    this.dirtyClean.setDirty();\n    this.builderDirtyClean.setDirty();\n  };\n  AbstractRowColModel.prototype.updateDescriptorIndices = function () {\n    var _this = this;\n    var oldSelected = this._selected;\n    this._selected = [];\n    this.descriptors.forEach(function (descriptor, i) {\n      descriptor.index = i;\n      if (descriptor.selected) {\n        _this._selected.push(i);\n      }\n    });\n    if (this._selected.length !== oldSelected.length) {\n      this.fireSelectionChange();\n      return;\n    }\n    this._selected.sort();\n    oldSelected.sort();\n    var change = oldSelected.some(function (idx, i) {\n      return idx !== _this._selected[i];\n    });\n    if (change) {\n      this.fireSelectionChange();\n    }\n  };\n  AbstractRowColModel.prototype.addDragReadyClass = function (descriptor, index) {\n    if (!descriptor || !(index >= 0)) {\n      return;\n    }\n    var top = this.name === 'row' ? index : -1;\n    var left = this.name === 'row' ? -1 : index;\n    var dragReadyClass = this.grid.cellClasses.create(top, left, 'grid-col-drag-ready');\n    this.grid.cellClasses.add(dragReadyClass);\n    descriptor.dragReadyClass = dragReadyClass;\n  };\n  AbstractRowColModel.prototype.removeDragReadyClass = function (descriptor) {\n    if (!descriptor || !descriptor.dragReadyClass) {\n      return;\n    }\n    this.grid.cellClasses.remove(descriptor.dragReadyClass);\n    descriptor.dragReadyClass = undefined;\n  };\n  AbstractRowColModel.prototype.compactAndSort = function () {\n    this.rangeStates = this.rangeStates.slice().sort(function (a, b) {\n      return a.start - b.start;\n    }).reduce(function (newRangeStates, rs) {\n      var last = newRangeStates.pop();\n      if (!last) {\n        return __spreadArray(__spreadArray([], newRangeStates), [rs]);\n      }\n      if (last.end < rs.start) {\n        return __spreadArray(__spreadArray([], newRangeStates), [last, rs]);\n      }\n      if (last.end > rs.end) {\n        return __spreadArray(__spreadArray([], newRangeStates), [last]);\n      }\n      return __spreadArray(__spreadArray([], newRangeStates), [{\n        start: last.start,\n        end: rs.end\n      }]);\n    }, []);\n  };\n  return AbstractRowColModel;\n}();\nexports.AbstractRowColModel = AbstractRowColModel;\nfunction create(grid, name, lengthName, defaultSize) {\n  return new AbstractRowColModel(grid, name, lengthName, defaultSize);\n}\nexports.create = create;\nexports.default = create;","map":{"version":3,"names":["debounce_1","require","dirty_clean_1","dirty_props_1","pass_through_1","util","AbstractRowColModel","grid","name","lengthName","defaultSize","descriptors","_numFixed","_numHeaders","_selected","dirtyClean","default","builderDirtyClean","areBuildersDirty","isDirty","ROW_COL_EVENT_TYPE","fireSelectionChange","eventLoop","fire","prototype","add","_toAdd","_this","toAdd","toArray","forEach","descriptor","header","splice","fixed","length","Error","push","updateDescriptorIndices","setDescriptorsDirty","action","addHeaders","headerDescriptor","index","get","dataSpace","includeHeaders","subtract","remove","dontUpdateIndex","indexOf","clear","removed","slice","move","_fromIndexes","target","after","fromIndexes","from","toValue","sort","a","b","map","fromIndex","removedDescriptors","reverse","_a","apply","__spreadArray","concat","numHeaders","numFixed","excludeHeaders","toVirtual","dataIndex","toData","virtualIndex","select","_indexes","dontFire","indexes","changes","filter","idx","hasDescriptor","console","warn","selected","selectable","addDragReadyClass","undefined","c","deselect","selectedMap","reduce","selectedIndex","removeDragReadyClass","Object","keys","array","selectedKey","toggleSelect","clearSelected","getSelected","allSelected","create","builder","expanded","expandedClass","setExpanded","exp","children","top_1","left","height","Infinity","width","cellClasses","isBuiltActionable","_fixed","onDirty","dataModel","setDirty","createBuilder","render","update","sizeOf","NaN","hidden","size","eventBody","event","assign","type","oldSelected","i","change","some","top","dragReadyClass","compactAndSort","rangeStates","start","newRangeStates","rs","last","pop","end","exports"],"sources":["C:\\amazon\\amazon\\node_modules\\grid\\src\\modules\\abstract-row-col-model\\index.ts"],"sourcesContent":["import { Grid } from '../core';\nimport { IGridDataChangeBody, IGridDataResult } from '../data-model';\nimport debounce from '../debounce';\nimport makeDirtyClean, { IDirtyClean } from '../dirty-clean';\nimport addDirtyProps from '../dirty-props';\nimport { IEditOptions } from '../edit-model';\nimport passThrough from '../pass-through';\nimport * as util from '../util';\n\nexport interface IAbstractRowColModel {\n  defaultSize: number;\n  areBuildersDirty: () => boolean;\n  isDirty: () => boolean;\n  get(i: number): IRowColDescriptor;\n  toVirtual(i: number): number;\n  toData(i: number): number;\n  length(includeHeaders?: boolean): number;\n  header(index: number): IRowColDescriptor;\n  add(d?: IRowColDescriptor | IRowColDescriptor[]): void;\n  addHeaders(d?: IRowColDescriptor | IRowColDescriptor[]): void;\n  remove(descriptor: IRowColDescriptor, dontUpdateIndex?: boolean): void;\n  clear(includeHeaders?: boolean): void;\n  move(fromIndexes: number | number[], target: number, after?: boolean): void;\n  numHeaders(): number;\n  numFixed(excludeHeaders?: boolean): number;\n  sizeOf(index: number): number;\n  select(indexes: number | number[], dontFire?: boolean): void;\n  deselect(indexes: number | number[], dontFire?: boolean): void;\n  toggleSelect(index: number): void;\n  clearSelected(): void;\n  getSelected(): number[];\n  allSelected(): boolean;\n  create(builder?: IRowColBuilder): IRowColDescriptor;\n  createBuilder(render: BuilderRenderer, update?: BuilderUpdater): IRowColBuilder;\n}\n\nexport interface IRowColDescriptor {\n  expanded: boolean;\n  isBuiltActionable: boolean;\n  hidden?: boolean;\n  index?: number;\n  selected?: boolean;\n  selectable?: boolean;\n  header?: boolean;\n  fixed?: boolean;\n  dragReadyClass?: any; // a class descriptor\n  builder?: IRowColBuilder;\n  children?: IRowColDescriptor[];\n  editOptions?: IEditOptions;\n  data?: Array<IGridDataChangeBody<any>>;\n}\n\nexport interface IRowDescriptor extends IRowColDescriptor {\n  height?: number;\n  children?: IRowDescriptor[];\n}\nexport interface IColDescriptor extends IRowColDescriptor {\n  width?: number;\n  children?: IColDescriptor[];\n}\n\nexport interface IBuilderUpdateContext {\n  virtualCol: number;\n  virtualRow: number;\n  data: IGridDataResult<any>;\n}\nexport interface IBuilderRenderContext {\n  viewRow: number;\n  viewCol: number;\n  previousElement: HTMLElement | undefined;\n}\n\nexport type BuilderRenderer = (context: IBuilderRenderContext) => HTMLElement | undefined;\nexport type BuilderUpdater = (builtElem: HTMLElement | undefined, context: IBuilderUpdateContext) => HTMLElement | void;\n\nexport interface IRowColBuilder {\n  render: BuilderRenderer;\n  update: BuilderUpdater;\n  includeHeaders: boolean;\n}\n\nexport interface IRowColEventBody {\n  action: 'add' | 'remove' | 'move' | 'hide' | 'size';\n  descriptors: IRowColDescriptor[];\n  target?: undefined;\n}\n\nexport interface IRowColEvent extends IRowColEventBody {\n  type: string;\n}\n\nexport class AbstractRowColModel {\n  grid: Grid;\n  defaultSize: number;\n  areBuildersDirty: () => boolean;\n  isDirty: () => boolean;\n  private name: string;\n  rangeStates: any[];\n  private descriptors: IRowColDescriptor[] = [];\n  private _numFixed: number = 0;\n  private _numHeaders: number = 0;\n  private dirtyClean: IDirtyClean;\n  private builderDirtyClean: IDirtyClean;\n  private _selected: number[] = [];\n  private ROW_COL_EVENT_TYPE: string;\n  private lengthName: string;\n  private fireSelectionChange: () => void;\n  constructor(\n    grid: Grid,\n    name: string,\n    lengthName: string,\n    defaultSize: number\n  ) {\n    this.grid = grid;\n    this.name = name;\n    this.dirtyClean = makeDirtyClean(grid);\n    this.builderDirtyClean = makeDirtyClean(grid);\n    this.areBuildersDirty = this.builderDirtyClean.isDirty;\n    this.isDirty = this.dirtyClean.isDirty;\n    this.ROW_COL_EVENT_TYPE = 'grid-' + name + '-change';\n    this.defaultSize = defaultSize;\n    this.lengthName = lengthName;\n    this.fireSelectionChange = debounce(() => {\n      grid.eventLoop.fire('grid-' + name + '-selection-change');\n    }, 1);\n  }\n\n  add(_toAdd?: IRowColDescriptor | IRowColDescriptor[]) {\n    if (!_toAdd) {\n      return;\n    }\n    const toAdd = util.toArray(_toAdd);\n    toAdd.forEach((descriptor) => {\n      if (descriptor.header) {\n        this.descriptors.splice(this._numHeaders, 0, descriptor);\n        this._numFixed++;\n        this._numHeaders++;\n      } else {\n        // if the column is fixed and the last one added is fixed (we only allow fixed at the beginning for now)\n        if (descriptor.fixed) {\n          if (!this.descriptors.length || this.descriptors[this.descriptors.length - 1].fixed) {\n            this._numFixed++;\n          } else {\n            throw new Error('Cannot add a fixed column after an unfixed one');\n          }\n        }\n        this.descriptors.push(descriptor);\n      }\n    });\n    this.updateDescriptorIndices();\n    this.setDescriptorsDirty({\n      action: 'add',\n      descriptors: toAdd\n    });\n  }\n  addHeaders(_toAdd?: IRowColDescriptor | IRowColDescriptor[]) {\n    if (!_toAdd) {\n      return;\n    }\n    const toAdd = util.toArray(_toAdd);\n    toAdd.forEach((headerDescriptor) => {\n      headerDescriptor.header = true;\n    });\n    this.add(toAdd);\n  }\n  header(index: number) {\n    return this.descriptors[index];\n  }\n  get(index: number, dataSpace?: boolean) {\n    if (dataSpace) {\n      index += this._numHeaders;\n    }\n    return this.descriptors[index];\n  }\n  length(includeHeaders?: boolean) {\n    const subtract = includeHeaders ? 0 : this._numHeaders;\n    return this.descriptors.length - subtract;\n  }\n  remove(descriptor: IRowColDescriptor, dontUpdateIndex?: boolean) {\n    const index = this.descriptors.indexOf(descriptor);\n    if (index !== -1) {\n      this.descriptors.splice(index, 1);\n      if (descriptor.header) {\n        this._numFixed--;\n        this._numHeaders--;\n      } else if (descriptor.fixed) {\n        this._numFixed--;\n      }\n    }\n    if (!dontUpdateIndex) {\n      this.updateDescriptorIndices();\n      this.setDescriptorsDirty({\n        action: 'remove',\n        descriptors: [descriptor]\n      });\n    }\n  }\n  clear(includeHeaders?: boolean) {\n    let removed;\n    if (includeHeaders) {\n      removed = this.descriptors;\n      this.descriptors = [];\n      this._numFixed = 0;\n      this._numHeaders = 0;\n    } else {\n      removed = this.descriptors.slice(this._numHeaders);\n      this.descriptors = this.descriptors.slice(0, this._numHeaders);\n      this._numFixed = this._numHeaders;\n    }\n    this.updateDescriptorIndices();\n    if (removed && removed.length) {\n      this.setDescriptorsDirty({\n        action: 'remove',\n        descriptors: removed\n      });\n    }\n  }\n  move(_fromIndexes: number | number[], target: number, after?: boolean) {\n    const fromIndexes = util.toArray(_fromIndexes);\n\n    if (fromIndexes.length === 1) {\n      // the single move case is easier and doesn't require the after hint\n      const from = fromIndexes[0];\n      this.descriptors.splice(target, 0, this.descriptors.splice(from, 1)[0]);\n      this.setDescriptorsDirty({\n        action: 'move',\n        descriptors: [this.get(from), this.get(target)]\n      });\n    } else {\n      while (fromIndexes.indexOf(target) !== -1 && target !== -1) {\n        target--;\n        after = true;\n      }\n\n      const toValue = this.descriptors[target];\n      const removed = fromIndexes\n        .sort((a, b) => b - a)\n        .map((fromIndex) => {\n          const removedDescriptors = this.descriptors.splice(fromIndex, 1);\n          return removedDescriptors[0];\n\n        });\n      removed.reverse();\n      this.descriptors.splice(this.descriptors.indexOf(toValue) + (after ? 1 : 0), 0, ...removed);\n      this.updateDescriptorIndices();\n      this.setDescriptorsDirty({\n        action: 'move',\n        descriptors: removed.concat(toValue)\n      });\n    }\n  }\n  numHeaders() {\n    return this._numHeaders;\n  }\n  numFixed(excludeHeaders?: boolean) {\n    return this._numFixed - (excludeHeaders ? this._numHeaders : 0);\n  }\n  toVirtual(dataIndex: number) {\n    return dataIndex + this.numHeaders();\n  }\n  toData(virtualIndex: number) {\n    return virtualIndex - this.numHeaders();\n  }\n\n  select(_indexes: number | number[], dontFire?: boolean) {\n    const indexes = util.toArray(_indexes);\n    const changes = indexes\n      .filter((idx) => {\n        const hasDescriptor = !!this.get(idx, true);\n        if (!hasDescriptor) {\n          console.warn('Tried to select index that had no descriptor', idx);\n        }\n        return hasDescriptor;\n      })\n      .map((idx) => {\n        const descriptor = this.get(idx, true);\n        if (!descriptor.selected && descriptor.selectable !== false) {\n          this.addDragReadyClass(descriptor, idx);\n          descriptor.selected = true;\n          this._selected.push(idx);\n          return idx;\n        }\n        return undefined;\n      })\n      .filter((c) => c != undefined) as number[];\n    if (changes.length && !dontFire) {\n      this.fireSelectionChange();\n    }\n  }\n  deselect(_indexes: number | number[], dontFire?: boolean) {\n    const indexes = util.toArray(_indexes);\n    const selectedMap = this._selected.reduce<{ [key: string]: number | false }>((map, selectedIndex) => {\n      map[selectedIndex] = selectedIndex;\n      return map;\n    }, {});\n    const changes = indexes\n      .filter((idx) => {\n        const hasDescriptor = !!this.get(idx, true);\n        if (!hasDescriptor) {\n          console.warn('Tried to deselect index that had no descriptor', idx);\n        }\n        return hasDescriptor;\n      })\n      .map((idx) => {\n        const descriptor = this.get(idx, true);\n        this.removeDragReadyClass(descriptor);\n        if (descriptor.selected) {\n          descriptor.selected = false;\n          selectedMap[idx] = false;\n          return idx;\n        }\n        return undefined;\n      })\n      .filter((c) => c != undefined) as number[];\n\n    this._selected =\n      Object.keys(selectedMap)\n        .reduce<number[]>((array, selectedKey) => {\n          const idx = selectedMap[selectedKey];\n          if (idx !== false) {\n            array.push(idx);\n          }\n          return array;\n        }, []);\n\n    if (changes.length && !dontFire) {\n      this.fireSelectionChange();\n    }\n  }\n  toggleSelect(index: number) {\n    const descriptor = this.get(index, true);\n    if (descriptor.selected) {\n      this.deselect(index);\n    } else {\n      this.select(index);\n    }\n  }\n  clearSelected() {\n    // have to make a copy or we are iterating the same array we're removing from yikes.\n    return this.deselect(this.getSelected().slice(0));\n  }\n  getSelected() {\n    return this._selected;\n  }\n  allSelected() {\n    return this.getSelected().length === this.length();\n  }\n  create(builder?: IRowColBuilder) {\n    let fixed: boolean | undefined = false;\n    let expanded = false;\n    let expandedClass: any; // TODO: cell class descriptor type\n    const setExpanded = (exp: boolean) => {\n      if (!descriptor.children || descriptor.index == undefined) {\n        return;\n      }\n      expanded = exp;\n      // we never look for changes to the children, if you need to change it, remove and add the row again\n      if (expanded) {\n        this.descriptors.splice(descriptor.index + 1, 0, ...descriptor.children);\n        this.updateDescriptorIndices();\n        this.setDescriptorsDirty({\n          action: 'add',\n          descriptors: descriptor.children\n        });\n        const top = this.name === 'row' ? descriptor.index : 0;\n        const left = this.name === 'col' ? descriptor.index : 0;\n        const height = this.name === 'row' ? 1 : Infinity;\n        const width = this.name === 'col' ? 1 : Infinity;\n        expandedClass = this.grid.cellClasses.create(top, left, 'grid-expanded', height, width, 'virtual');\n        this.grid.cellClasses.add(expandedClass);\n\n      } else {\n        this.descriptors.splice(descriptor.index + 1, descriptor.children.length);\n        this.updateDescriptorIndices();\n        this.setDescriptorsDirty({\n          action: 'remove',\n          descriptors: [...descriptor.children]\n        });\n        if (expandedClass) {\n          this.grid.cellClasses.remove(expandedClass);\n        }\n      }\n    };\n    const descriptor: IRowColDescriptor = {\n      isBuiltActionable: true,\n      get fixed() {\n        return descriptor.header || !!fixed;\n      },\n      set fixed(_fixed: boolean | undefined) {\n        fixed = _fixed;\n      },\n      get expanded() {\n        return expanded;\n      },\n      set expanded(exp: boolean) {\n        setExpanded(exp);\n      }\n    };\n\n    addDirtyProps(descriptor, ['builder'], [this.builderDirtyClean]);\n    addDirtyProps(descriptor, [{\n      name: 'data', onDirty: () => {\n        this.grid.dataModel.setDirty();\n      }\n    }], []);\n    descriptor.builder = builder;\n\n    return addDirtyProps(descriptor, [{\n      name: this.lengthName,\n      onDirty: () => {\n        this.setDescriptorsDirty({\n          action: 'size',\n          descriptors: [descriptor]\n        });\n      }\n    }, {\n      name: 'hidden',\n      onDirty: () => {\n        this.setDescriptorsDirty({\n          action: 'hide',\n          descriptors: [descriptor]\n        });\n      }\n    }], [this.dirtyClean]);\n  }\n  createBuilder(render: BuilderRenderer, update: BuilderUpdater = passThrough, includeHeaders: boolean = false) {\n    return {\n      render,\n      update,\n      includeHeaders\n    };\n  }\n\n  sizeOf(index: number) {\n    const descriptor = this.get(index);\n    if (!descriptor) {\n      return NaN;\n    }\n\n    if (descriptor.hidden) {\n      return 0;\n    }\n\n    const size: number | undefined = (descriptor as any)[this.lengthName];\n    return size || this.defaultSize;\n  }\n\n  private setDescriptorsDirty(eventBody: IRowColEventBody) {\n    // tslint:disable-next-line:prefer-object-spread\n    const event: IRowColEvent = Object.assign(eventBody, {\n      type: this.ROW_COL_EVENT_TYPE\n    });\n    this.grid.eventLoop.fire(event);\n    this.dirtyClean.setDirty();\n    this.builderDirtyClean.setDirty();\n  }\n\n  private updateDescriptorIndices() {\n    const oldSelected = this._selected;\n    this._selected = [];\n    this.descriptors.forEach((descriptor, i) => {\n      descriptor.index = i;\n      if (descriptor.selected) {\n        this._selected.push(i);\n      }\n    });\n    if (this._selected.length !== oldSelected.length) {\n      this.fireSelectionChange();\n      return;\n    }\n    this._selected.sort();\n    oldSelected.sort();\n    const change = oldSelected.some((idx, i) => {\n      return idx !== this._selected[i];\n    });\n    if (change) {\n      this.fireSelectionChange();\n    }\n  }\n\n  private addDragReadyClass(descriptor: IRowColDescriptor, index: number) {\n    if (!descriptor || !(index >= 0)) {\n      return;\n    }\n    const top = this.name === 'row' ? index : -1;\n    const left = this.name === 'row' ? -1 : index;\n    const dragReadyClass = this.grid.cellClasses.create(top, left, 'grid-col-drag-ready');\n    this.grid.cellClasses.add(dragReadyClass);\n    descriptor.dragReadyClass = dragReadyClass;\n  }\n\n  private removeDragReadyClass(descriptor: IRowColDescriptor) {\n    if (!descriptor || !descriptor.dragReadyClass) {\n      return;\n    }\n    this.grid.cellClasses.remove(descriptor.dragReadyClass);\n    descriptor.dragReadyClass = undefined;\n  }\n\n  private compactAndSort() {\n    this.rangeStates = this.rangeStates\n      .slice()\n      .sort((a, b) => a.start - b.start)\n      .reduce((newRangeStates, rs) => {\n        const last = newRangeStates.pop();\n\n        if (!last) {\n          return [...newRangeStates, rs];\n        }\n\n        if (last.end < rs.start) {\n          return [...newRangeStates, last, rs];\n        }\n\n        if (last.end > rs.end) {\n          return [...newRangeStates, last];\n        }\n\n        // overlapping ranges\n        return [\n          ...newRangeStates,\n          {\n            start: last.start,\n            end: rs.end,\n          }\n        ];\n      }, []);\n  }\n}\n\nexport function create(\n  grid: Grid,\n  name: string,\n  lengthName: string,\n  defaultSize: number\n): IAbstractRowColModel {\n  return new AbstractRowColModel(grid, name, lengthName, defaultSize);\n}\n\nexport default create;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}