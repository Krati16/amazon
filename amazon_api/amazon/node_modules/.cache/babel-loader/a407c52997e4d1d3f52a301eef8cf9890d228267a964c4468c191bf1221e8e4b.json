{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.create = void 0;\nvar util = require(\"../util\");\nfunction makeDimension(gridDimension) {\n  var dimension = {\n    toCellFromPx: function (px) {\n      if (px < 0) {\n        return NaN;\n      }\n      var sumLength = 0;\n      for (var r = 0; r < gridDimension.rowColModel.length(true); r++) {\n        sumLength += gridDimension.rowColModel.sizeOf(r);\n        if (px < sumLength) {\n          return r;\n        }\n      }\n      return NaN;\n    },\n    clampCell: function (cell) {\n      var maxRowCol = gridDimension.rowColModel.length(true) - 1;\n      return util.clamp(cell, 0, maxRowCol);\n    },\n    sizeOf: function (start, end) {\n      var length = 0;\n      if (end != undefined && end < start) {\n        return 0;\n      }\n      end = util.isNumber(end) ? end : start;\n      end = dimension.clampCell(end);\n      start = dimension.clampCell(start);\n      for (var i = start; i <= end; i++) {\n        length += gridDimension.rowColModel.sizeOf(i);\n      }\n      return length;\n    },\n    totalSize: function () {\n      return dimension.sizeOf(0, gridDimension.rowColModel.length(true) - 1);\n    },\n    fixedSize: function () {\n      return dimension.sizeOf(0, gridDimension.rowColModel.numFixed() - 1);\n    }\n  };\n  return dimension;\n}\nfunction create(grid) {\n  var dimensions = {\n    rows: makeDimension(grid.rows),\n    cols: makeDimension(grid.cols)\n  };\n  var virtualPixelCellModel = {\n    getRow: dimensions.rows.toCellFromPx,\n    getCol: dimensions.cols.toCellFromPx,\n    clampRow: dimensions.rows.clampCell,\n    clampCol: dimensions.cols.clampCell,\n    height: dimensions.rows.sizeOf,\n    width: dimensions.cols.sizeOf,\n    totalHeight: dimensions.rows.totalSize,\n    totalWidth: dimensions.cols.totalSize,\n    fixedHeight: dimensions.rows.fixedSize,\n    fixedWidth: dimensions.cols.fixedSize,\n    rows: dimensions.rows,\n    cols: dimensions.cols\n  };\n  function sizeChangeListener() {\n    grid.eventLoop.fire('grid-virtual-pixel-cell-change');\n  }\n  grid.eventLoop.bind('grid-col-change', sizeChangeListener);\n  grid.eventLoop.bind('grid-row-change', sizeChangeListener);\n  return virtualPixelCellModel;\n}\nexports.create = create;\nexports.default = create;","map":{"version":3,"names":["util","require","makeDimension","gridDimension","dimension","toCellFromPx","px","NaN","sumLength","r","rowColModel","length","sizeOf","clampCell","cell","maxRowCol","clamp","start","end","undefined","isNumber","i","totalSize","fixedSize","numFixed","create","grid","dimensions","rows","cols","virtualPixelCellModel","getRow","getCol","clampRow","clampCol","height","width","totalHeight","totalWidth","fixedHeight","fixedWidth","sizeChangeListener","eventLoop","fire","bind","exports","default"],"sources":["C:\\amazon\\amazon\\node_modules\\grid\\src\\modules\\virtual-pixel-cell-model\\index.ts"],"sourcesContent":["import { Grid, IGridDimension } from '../core';\nimport * as  util from '../util';\n\n// all pixels are assumed to be in the virtual world, no real world pixels are dealt with here :)\nexport interface IVirtualPixelCellDimensionInfo {\n    toCellFromPx(px: number): number;\n    clampCell(cell: number): number;\n    sizeOf(startCell: number, endCell?: number): number;\n    totalSize(): number;\n    fixedSize(): number;\n}\n\nexport interface IVirtualPixelCellModel {\n    rows: IVirtualPixelCellDimensionInfo;\n    cols: IVirtualPixelCellDimensionInfo;\n    getRow: IVirtualPixelCellDimensionInfo['toCellFromPx'];\n    getCol: IVirtualPixelCellDimensionInfo['toCellFromPx'];\n    clampRow: IVirtualPixelCellDimensionInfo['clampCell'];\n    clampCol: IVirtualPixelCellDimensionInfo['clampCell'];\n    height: IVirtualPixelCellDimensionInfo['sizeOf'];\n    width: IVirtualPixelCellDimensionInfo['sizeOf'];\n    totalWidth: IVirtualPixelCellDimensionInfo['totalSize'];\n    totalHeight: IVirtualPixelCellDimensionInfo['totalSize'];\n    fixedWidth: IVirtualPixelCellDimensionInfo['fixedSize'];\n    fixedHeight: IVirtualPixelCellDimensionInfo['fixedSize'];\n}\n\nfunction makeDimension(gridDimension: IGridDimension) {\n    const dimension: IVirtualPixelCellDimensionInfo = {\n        toCellFromPx(px: number) {\n            if (px < 0) {\n                return NaN;\n            }\n            let sumLength = 0;\n            for (let r = 0; r < gridDimension.rowColModel.length(true); r++) {\n                sumLength += gridDimension.rowColModel.sizeOf(r);\n                if (px < sumLength) {\n                    return r;\n                }\n            }\n            return NaN;\n        },\n        clampCell(cell: number) {\n            const maxRowCol = gridDimension.rowColModel.length(true) - 1;\n            return util.clamp(cell, 0, maxRowCol);\n        },\n        sizeOf(start: number, end?: number) {\n            let length = 0;\n            if (end != undefined && end < start) {\n                return 0;\n            }\n            end = util.isNumber(end) ? end : start;\n            end = dimension.clampCell(end);\n            start = dimension.clampCell(start);\n            for (let i = start; i <= end; i++) {\n                length += gridDimension.rowColModel.sizeOf(i);\n            }\n            return length;\n        },\n        totalSize() {\n            return dimension.sizeOf(0, gridDimension.rowColModel.length(true) - 1);\n        },\n        fixedSize() {\n            return dimension.sizeOf(0, gridDimension.rowColModel.numFixed() - 1);\n        },\n    };\n    return dimension;\n}\n\nexport function create(grid: Grid) {\n\n    const dimensions = {\n        rows: makeDimension(grid.rows),\n        cols: makeDimension(grid.cols),\n    };\n    const virtualPixelCellModel: IVirtualPixelCellModel = {\n        getRow: dimensions.rows.toCellFromPx,\n        getCol: dimensions.cols.toCellFromPx,\n        clampRow: dimensions.rows.clampCell,\n        clampCol: dimensions.cols.clampCell,\n        height: dimensions.rows.sizeOf,\n        width: dimensions.cols.sizeOf,\n        totalHeight: dimensions.rows.totalSize,\n        totalWidth: dimensions.cols.totalSize,\n        fixedHeight: dimensions.rows.fixedSize,\n        fixedWidth: dimensions.cols.fixedSize,\n        rows: dimensions.rows,\n        cols: dimensions.cols,\n    };\n\n    function sizeChangeListener() {\n        // for now we don't cache anything about this so we just notify\n        grid.eventLoop.fire('grid-virtual-pixel-cell-change');\n    }\n\n    grid.eventLoop.bind('grid-col-change', sizeChangeListener);\n    grid.eventLoop.bind('grid-row-change', sizeChangeListener);\n\n    return virtualPixelCellModel;\n}\n\nexport default create;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}